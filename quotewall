#!/bin/python

import os
import random
import time
import argparse

from PIL import ImageFont, Image, ImageDraw


def calculate_font_size(text, size):
    l = len(text)

    resize_heuristic = 0.9
    resize_actual = 0.985
    while l > 1:
        l = l * resize_heuristic
        size = size * resize_actual

    return int(size)


def wrap_text(text, w=30):
    new_text = ""
    new_sentence = ""
    for word in text.split(" "):
        delim = " " if new_sentence != "" else ""
        new_sentence = new_sentence + delim + word
        if len(new_sentence) > w:
            new_text += "\n" + new_sentence
            new_sentence = ""
    new_text += "\n" + new_sentence
    return new_text.strip()


def read_quote(filename):
    with open(filename) as f:
        text = f.readline()
        author = f.readline()
        return text.strip(), author.strip()


def create_image(quote, author, background_filename, width, height, font_filename, size, spacing=3):
    quote = wrap_text(quote)

    back = Image.open(background_filename, 'r')
    bg_w, bg_h = back.size
    img_w = width if width > 0 else bg_w
    img_h = height if height > 0 else bg_h

    img = Image.new("RGBA", (img_w, img_h), (255, 255, 255))

    offset = ((img_w - bg_w) // 2, (img_h - bg_h) // 2)
    img.paste(back, offset)

    font = ImageFont.truetype(font_filename, size)
    draw = ImageDraw.Draw(img)

    img_w, img_h = img.size
    text_w, text_h = draw.multiline_textsize(quote, font=font, spacing=spacing)

    x = (img_w - text_w) // 2
    y = (img_h - text_h) // 2

    draw.multiline_text(align="center", xy=(x, y), text=quote, fill=(
        255, 255, 255), font=font, spacing=spacing)

    author_w, author_h = draw.textsize(author, font=font)
    draw.text(xy=(x + text_w - author_w, y + text_h + author_h + spacing), text=author,
              fill=(255, 255, 255), font=font)

    return img


def select_file(filename):
    assert os.path.exists(filename)
    if os.path.isfile(filename):
        return filename
    return os.path.join(filename, random.choice(os.listdir(filename)))


def process_args():
    parser = argparse.ArgumentParser(
        description="Creates a wallpaper from a quote and a background.")

    parser.add_argument("-q", "--quote", help="quote filename or folder",
                        required=True, type=str)

    parser.add_argument("-b", "--background", help="background filename or folder",
                        required=True, type=str)

    parser.add_argument("-f", "--font", help="font filename or folder",
                        required=True, type=str)

    parser.add_argument("-o", "--output", help="output filename",
                        required=True, type=str)

    parser.add_argument("-d", "--dimensions", help="output dimensions (defaults to background dimensions)",
                        nargs=2, default=[0, 0], type=int)

    parser.add_argument("-s", "--font-size",
                        help="font size (defaults to 45)", default=45, type=int)

    return parser.parse_args()

if __name__ == "__main__":

    args = process_args()

    text, author = read_quote(select_file(args.quote))
    bg_filename = select_file(args.background)
    font_filename = select_file(args.font)
    width, height = tuple(args.dimensions)

    img = create_image(text, author, bg_filename, width, height, font_filename,
                       calculate_font_size(text, args.font_size))
    img.save(args.output)
